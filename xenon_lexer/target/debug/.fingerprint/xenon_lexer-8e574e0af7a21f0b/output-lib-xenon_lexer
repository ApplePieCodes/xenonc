{"$message_type":"diagnostic","message":"unused doc comment","code":{"code":"unused_doc_comments","explanation":null},"level":"warning","spans":[{"file_name":"src\\lexer.rs","byte_start":1296,"byte_end":6644,"line_start":47,"line_end":162,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        while self.peek(0).is_ok() {","highlight_start":9,"highlight_end":37},{"text":"            let mut token = Token::new();","highlight_start":1,"highlight_end":42},{"text":"            token.line = self.line;","highlight_start":1,"highlight_end":36},{"text":"            token.start_col = self.column;","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if self.peek(0)?.is_alphabetic() { // Keyword or Identifier","highlight_start":1,"highlight_end":72},{"text":"                buffer.push(self.consume()?);","highlight_start":1,"highlight_end":46},{"text":"                while self.peek(0)?.is_alphanumeric() {","highlight_start":1,"highlight_end":56},{"text":"                    buffer.push(self.consume()?);","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                if KEYWORDS.contains(&buffer.as_str()) {","highlight_start":1,"highlight_end":57},{"text":"                    token.kind = match buffer.as_str() {","highlight_start":1,"highlight_end":57},{"text":"                        \"as\" => TokenKind::AsKw,","highlight_start":1,"highlight_end":49},{"text":"                        \"break\" => TokenKind::BreakKw,","highlight_start":1,"highlight_end":55},{"text":"                        \"const\" => TokenKind::ConstKw,","highlight_start":1,"highlight_end":55},{"text":"                        \"continue\" => TokenKind::ContinueKw,","highlight_start":1,"highlight_end":61},{"text":"                        \"else\" => TokenKind::ElseKw,","highlight_start":1,"highlight_end":53},{"text":"                        \"extern\" => TokenKind::ExternKw,","highlight_start":1,"highlight_end":57},{"text":"                        \"false\" => TokenKind::FalseKw,","highlight_start":1,"highlight_end":55},{"text":"                        \"true\" => TokenKind::TrueKw,","highlight_start":1,"highlight_end":53},{"text":"                        \"fn\" => TokenKind::FnKw,","highlight_start":1,"highlight_end":49},{"text":"                        \"for\" => TokenKind::ForKw,","highlight_start":1,"highlight_end":51},{"text":"                        \"foreach\" => TokenKind::ForeachKw,","highlight_start":1,"highlight_end":59},{"text":"                        \"if\" => TokenKind::IfKw,","highlight_start":1,"highlight_end":49},{"text":"                        \"in\" => TokenKind::InKw,","highlight_start":1,"highlight_end":49},{"text":"                        \"let\" => TokenKind::LetKw,","highlight_start":1,"highlight_end":51},{"text":"                        \"loop\" => TokenKind::LoopKw,","highlight_start":1,"highlight_end":53},{"text":"                        \"switch\" => TokenKind::SwitchKw,","highlight_start":1,"highlight_end":57},{"text":"                        \"module\" => TokenKind::ModuleKw,","highlight_start":1,"highlight_end":57},{"text":"                        \"public\" => TokenKind::PublicKw,","highlight_start":1,"highlight_end":57},{"text":"                        \"private\" => TokenKind::PrivateKw,","highlight_start":1,"highlight_end":59},{"text":"                        \"ref\" => TokenKind::RefKw,","highlight_start":1,"highlight_end":51},{"text":"                        \"return\" => TokenKind::ReturnKw,","highlight_start":1,"highlight_end":57},{"text":"                        \"self\" => TokenKind::SelfKw,","highlight_start":1,"highlight_end":53},{"text":"                        \"struct\" => TokenKind::StructKw,","highlight_start":1,"highlight_end":57},{"text":"                        \"unsafe\" => TokenKind::UnsafeKw,","highlight_start":1,"highlight_end":57},{"text":"                        \"use\" => TokenKind::UseKw,","highlight_start":1,"highlight_end":51},{"text":"                        \"while\" => TokenKind::WhileKw,","highlight_start":1,"highlight_end":55},{"text":"                        \"async\" => TokenKind::AsyncKw,","highlight_start":1,"highlight_end":55},{"text":"                        \"await\" => TokenKind::AwaitKw,","highlight_start":1,"highlight_end":55},{"text":"                        \"dyn\" => TokenKind::DynKw,","highlight_start":1,"highlight_end":51},{"text":"                        \"abstract\" => TokenKind::AbstractKw,","highlight_start":1,"highlight_end":61},{"text":"                        \"override\" => TokenKind::OverrideKw,","highlight_start":1,"highlight_end":61},{"text":"                        \"virtual\" => TokenKind::VirtualKw,","highlight_start":1,"highlight_end":59},{"text":"                        \"safe\" => TokenKind::SafeKw,","highlight_start":1,"highlight_end":53},{"text":"                        \"trait\" => TokenKind::TraitKw,","highlight_start":1,"highlight_end":55},{"text":"                        _ => TokenKind::Identifier,","highlight_start":1,"highlight_end":52},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    token.kind = TokenKind::Identifier;","highlight_start":1,"highlight_end":56},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                token.end_col = self.column;","highlight_start":1,"highlight_end":45},{"text":"                token.value = buffer.clone();","highlight_start":1,"highlight_end":46},{"text":"                self.tokens.push(token);","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            else if self.peek(0)?.is_numeric() { // Integer or Float Literal","highlight_start":1,"highlight_end":77},{"text":"                buffer.push(self.consume()?);","highlight_start":1,"highlight_end":46},{"text":"                while self.peek(0)?.is_numeric() || self.peek(0)? == '.' {","highlight_start":1,"highlight_end":75},{"text":"                    buffer.push(self.consume()?);","highlight_start":1,"highlight_end":50},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                if self.peek(0)? == 'i' || self.peek(0)? == 'u' || self.peek(0)? == 'f' {","highlight_start":1,"highlight_end":90},{"text":"                    buffer.push(self.consume()?);","highlight_start":1,"highlight_end":50},{"text":"                    while self.peek(0)?.is_numeric() {","highlight_start":1,"highlight_end":55},{"text":"                        buffer.push(self.consume()?);","highlight_start":1,"highlight_end":54},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                token.kind = TokenKind::Literal(LiteralKind::Number);","highlight_start":1,"highlight_end":70},{"text":"                token.end_col = self.column;","highlight_start":1,"highlight_end":45},{"text":"                token.value = buffer.clone();","highlight_start":1,"highlight_end":46},{"text":"                self.tokens.push(token);","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            else if self.peek(0)? == '\\n' {","highlight_start":1,"highlight_end":44},{"text":"                self.line += 1;","highlight_start":1,"highlight_end":32},{"text":"                self.column = 1; // Go to column 1","highlight_start":1,"highlight_end":51},{"text":"                continue;","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            else if self.peek(0)?.is_whitespace() { // note the whitespace","highlight_start":1,"highlight_end":75},{"text":"                token.kind = TokenKind::Whitespace;","highlight_start":1,"highlight_end":52},{"text":"                token.value = self.consume()?.to_string();","highlight_start":1,"highlight_end":59},{"text":"                token.end_col = self.column;","highlight_start":1,"highlight_end":45},{"text":"                self.tokens.push(token);","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            else { // Anything else","highlight_start":1,"highlight_end":36},{"text":"                buffer.push(self.consume()?);","highlight_start":1,"highlight_end":46},{"text":"                token.kind = match buffer.as_str() {","highlight_start":1,"highlight_end":53},{"text":"                    \";\" => TokenKind::Semicolon,","highlight_start":1,"highlight_end":49},{"text":"                    \",\" => TokenKind::Comma,","highlight_start":1,"highlight_end":45},{"text":"                    \".\" => TokenKind::Dot,","highlight_start":1,"highlight_end":43},{"text":"                    \"(\" => TokenKind::OpenParen,","highlight_start":1,"highlight_end":49},{"text":"                    \")\" => TokenKind::CloseParen,","highlight_start":1,"highlight_end":50},{"text":"                    \"[\" => TokenKind::OpenBracket,","highlight_start":1,"highlight_end":51},{"text":"                    \"]\" => TokenKind::CloseBracket,","highlight_start":1,"highlight_end":52},{"text":"                    \"{\" => TokenKind::OpenBrace,","highlight_start":1,"highlight_end":49},{"text":"                    \"}\" => TokenKind::CloseBrace,","highlight_start":1,"highlight_end":50},{"text":"                    \"#\" => TokenKind::Pound,","highlight_start":1,"highlight_end":45},{"text":"                    \"?\" => TokenKind::Question,","highlight_start":1,"highlight_end":48},{"text":"                    \":\" => TokenKind::Colon,","highlight_start":1,"highlight_end":45},{"text":"                    \"=\" => TokenKind::Eq,","highlight_start":1,"highlight_end":42},{"text":"                    \"!\" => TokenKind::Bang,","highlight_start":1,"highlight_end":44},{"text":"                    \"<\" => TokenKind::Lt,","highlight_start":1,"highlight_end":42},{"text":"                    \">\" => TokenKind::Gt,","highlight_start":1,"highlight_end":42},{"text":"                    \"-\" => TokenKind::Minus,","highlight_start":1,"highlight_end":45},{"text":"                    \"&\" => TokenKind::And,","highlight_start":1,"highlight_end":43},{"text":"                    \"|\" => TokenKind::Or,","highlight_start":1,"highlight_end":42},{"text":"                    \"+\" => TokenKind::Plus,","highlight_start":1,"highlight_end":44},{"text":"                    \"*\" => TokenKind::Star,","highlight_start":1,"highlight_end":44},{"text":"                    \"/\" => TokenKind::Slash,","highlight_start":1,"highlight_end":45},{"text":"                    \"%\" => TokenKind::Percent,","highlight_start":1,"highlight_end":47},{"text":"                    _ => TokenKind::Unknown,","highlight_start":1,"highlight_end":45},{"text":"                };","highlight_start":1,"highlight_end":19},{"text":"                token.end_col = self.column;","highlight_start":1,"highlight_end":45},{"text":"                token.value = buffer.clone();","highlight_start":1,"highlight_end":46},{"text":"                self.tokens.push(token);","highlight_start":1,"highlight_end":41},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            buffer.clear();","highlight_start":1,"highlight_end":28},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"rustdoc does not generate documentation for expressions","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\lexer.rs","byte_start":1270,"byte_end":1287,"line_start":46,"line_end":46,"column_start":9,"column_end":26,"is_primary":true,"text":[{"text":"        /// Run until EOF","highlight_start":9,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use `//` for a plain comment","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_doc_comments)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused doc comment\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\lexer.rs:46:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        /// Run until EOF\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m47\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        while self.peek(0).is_ok() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut token = Token::new();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            token.line = self.line;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m50\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            token.start_col = self.column;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            buffer.clear();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrustdoc does not generate documentation for expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: use `//` for a plain comment\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_doc_comments)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused doc comment","code":{"code":"unused_doc_comments","explanation":null},"level":"warning","spans":[{"file_name":"src\\lexer.rs","byte_start":7106,"byte_end":7163,"line_start":180,"line_end":180,"column_start":13,"column_end":70,"is_primary":false,"text":[{"text":"            Err(self.gen_error(\"Unexpected end of file\".to_string()))","highlight_start":13,"highlight_end":70}],"label":"rustdoc does not generate documentation for expressions","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\lexer.rs","byte_start":7069,"byte_end":7093,"line_start":179,"line_end":179,"column_start":13,"column_end":37,"is_primary":true,"text":[{"text":"            /// File ended abruptly.","highlight_start":13,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use `//` for a plain comment","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused doc comment\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\lexer.rs:179:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            /// File ended abruptly.\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m180\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Err(self.gen_error(\"Unexpected end of file\".to_string()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m---------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrustdoc does not generate documentation for expressions\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: use `//` for a plain comment\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused doc comment","code":{"code":"unused_doc_comments","explanation":null},"level":"warning","spans":[{"file_name":"src\\lexer.rs","byte_start":7376,"byte_end":7399,"line_start":189,"line_end":189,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"        let res = self.peek(0);","highlight_start":9,"highlight_end":32}],"label":"rustdoc does not generate documentation for statements","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\lexer.rs","byte_start":7349,"byte_end":7367,"line_start":188,"line_end":188,"column_start":9,"column_end":27,"is_primary":true,"text":[{"text":"        /// Get the Result","highlight_start":9,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use `//` for a plain comment","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused doc comment\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\lexer.rs:188:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m188\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        /// Get the Result\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let res = self.peek(0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrustdoc does not generate documentation for statements\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: use `//` for a plain comment\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"3 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: 3 warnings emitted\u001b[0m\n\n"}
